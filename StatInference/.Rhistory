names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
#colnames(x) <- gsub("()", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
#colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
#colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
colClean <- function(x){
#colnames(x) <- gsub("()", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", ".X", colnames(x))
colnames(x) <- gsub("-Y", ".Y", colnames(x))
colnames(x) <- gsub("-Z", ".Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", ".X", colnames(x))
colnames(x) <- gsub("-Y", ".Y", colnames(x))
colnames(x) <- gsub("-Z", ".Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", ".X", colnames(x))
colnames(x) <- gsub("-Y", ".Y", colnames(x))
colnames(x) <- gsub("-Z", ".Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
View(testtrainingset)
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", "X", colnames(x))
colnames(x) <- gsub("-Y", "Y", colnames(x))
colnames(x) <- gsub("-Z", "Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
colnames(x) <- gsub("[-]", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
tidydataset <- testtrainingset %>%
group_by(subject, activityname.str) %>%
summarise(avg = avg(colnames(testtrainingset)))
View(testtrainingset)
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise(avg = avg(colnames(testtrainingset)))
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise(avg = mean(colnames(testtrainingset)))
View(tidydataset)
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise_all(mean)
View(tidydataset)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
#install.packages("plyr")
library(plyr)
#install.packages("dplyr")
library(dplyr)
zipfile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(zipfile, tf <- tempfile(fileext = ".zip"))
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", "X", colnames(x))
colnames(x) <- gsub("-Y", "Y", colnames(x))
colnames(x) <- gsub("-Z", "Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
colnames(x) <- gsub("[-]", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
testtrainingset <- testtrainingset[, !(colnames(testtrainingset) %in% c("activity"))]
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise_all(mean)
View(tidydataset)
View(tidydataset)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
myMatrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
Mymatrix$get()
myMatrix$get()
myMatrix$getInverse()
cacheSolve(myMatrix)
cacheSolve(myMatrix)
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RprogramWeek4/rankall.txt', encoding = 'UTF-8')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
#install.packages("plyr")
library(plyr)
#install.packages("dplyr")
library(dplyr)
zipfile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(zipfile, tf <- tempfile(fileext = ".zip"))
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("std", "std.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", "X", colnames(x))
colnames(x) <- gsub("-Y", "Y", colnames(x))
colnames(x) <- gsub("-Z", "Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
colnames(x) <- gsub("[-]", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
testtrainingset <- testtrainingset[, !(colnames(testtrainingset) %in% c("activity"))]
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise_all(mean)
View(tidydataset)
library(dataMaid)
install.packages(c("curl", "digest", "openssl", "RCurl", "stringi", "stringr", "withr", "yaml"))
install.packages("dataMaid")
library("dataMaid", lib.loc="~/R/win-library/3.4")
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/run_analysis.R')
unlink('C:/RPrograms/GettingCleaningProject/GettingCleaningData/CodeBook_cache', recursive = TRUE)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/run_analysis.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/run_analysis.R')
s <- ggplot(completedata, aes(x=interval, y=steps, color = weekend)) +
geom_line() +
facet_wrap(~weekend, ncol = 1, nrow=2)
library(ggplot2)
s <- ggplot(completedata, aes(x=interval, y=steps, color = weekend)) +
geom_line() +
facet_wrap(~weekend, ncol = 1, nrow=2)
s
completedata$weekend <- grepl("S.+", weekdays(as.Date(completedata$date)))
#panel plot of weekend v weekday data
#plot graphs in 2x2 panel
par(mfrow = c(2,1), mar=c(0, 4, 1, 1) + 0.1)#it goes c(bottom, left, top, right)
weekenddata <- subset(completedata, weekend == TRUE)
weekendintervalsteps <- aggregate(weekenddata$steps, by=list(weekenddata$interval)
, mean, na.action=na.omit)
weekdaydata <- subset(completedata, weekend == FALSE)
weekdayintervalsteps <- aggregate(weekdaydata$steps, by=list(weekdaydata$interval)
, mean, na.action=na.omit)
ggplot(completedata, aes(x=interval, y=steps, color = weekend)) +
geom_line() +
facet_wrap(~weekend, ncol = 1, nrow=2)
#create plot a
plot.ts(weekendintervalsteps$Group.1, weekendintervalsteps$x, type="l",  main="Weekend", ylab="", xlab="", xaxt='n')
#create plot b
plot.ts(weekdayintervalsteps$Group.1, weekdayintervalsteps$x, type="l",  main="Weekday", ylab="", xlab="", xlim=c(0,2000))
par("mar")
par(mar=c(3,4,4,1)+0.1)
unlink('C:/RPrograms/ReproducibleResearch/ReproducibleResearch/FinalProject/ReproducibleResearch/FinalProject/WeatherServiceReport_cache', recursive = TRUE)
library(ggplot2)
###plot graph
ggplot(data=head(summarypopulationData,10), aes(x=Event, y=populationEffect)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme( axis.ticks.x=element_blank())+
coord_flip() +
ggtitle("Top 10 Events Affecting Human Population") +
ylab("Total (Fatalities + Injuries)") +
xlab("Event")
summaryeconomicData <- summaryeconomicData[order(-summaryeconomicData$economicEffect), ]
ggplot(data=head(summaryeconomicData,10), aes(x=Event, y=economicEffect)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme(axis.ticks.x=element_blank())+
coord_flip()+
ggtitle("Top 10 Events Affecting Economy") +
ylab("Total Cost($) (Property + Crop Damage)") +
xlab("Event")
# Chunk 1
###set working dir
#setwd("C:\\RPrograms\\ReproducibleResearch\\ReproducibleResearch\\FinalProject\\ReproducibleResearch\\FinalProject")
###download and unzip raw data from website
datafile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(datafile, tf <- tempfile(fileext = ".bz2"))
###read csv data and create rawdata dataframe
rawdata <- read.csv(tf)
###Create tidydata as a subset of the rawdata - use visual inspection to help
### columns include are event, fatalities, injuries, property costs with exponent and crop costs with exponent column
tidydata <- rawdata[, c(8,23,24,25,26,27,28)]
###add column to sum fatalities and injury number
tidydata$populationEffect <- as.numeric(as.character(tidydata$FATALITIES))+as.numeric(as.character(tidydata$INJURIES))
###create a vector to hold and allow for conversion of exponent coding
exponent_Prop <- tidydata$PROPDMGEXP
exp_prop <- sapply(exponent_Prop, function(x)  if (x=='K') {1000} else if (x=='M') {1000000} else if (x=='H') {100} else if (x=='B') {1000000000} else {0})
###create a vector to hold and allow for conversion of exp coding
exponent_Crop <- tidydata$CROPDMGEXP
exp_crop <- sapply(exponent_Crop, function(x) if (x=='K') {1000} else if (x=='M') {1000000} else if (x=='H') {100} else if (x=='B') {1000000000} else {0})
###bind new columns to tidydata set containing number value for alpha label
tidydata <- cbind(tidydata, exp_prop, exp_crop)
###add column that calculates property and crop damage in $
tidydata$economicEffect <- (as.numeric(as.character(tidydata$PROPDMG))*as.numeric(as.character(tidydata$exp_prop)) + as.numeric(as.character(tidydata$CROPDMG))*as.numeric(as.character(tidydata$exp_crop)))
summarypopulationData <- aggregate(cbind(tidydata$EVTYPE, tidydata$populationEffect), by=list(tidydata$EVTYPE), FUN=sum, na.rm=TRUE, na.action=NULL)
summaryeconomicData <- aggregate(cbind(tidydata$EVTYPE, tidydata$economicEffect), by=list(tidydata$EVTYPE), FUN=sum, na.rm=TRUE, na.action=NULL)
colnames(summarypopulationData) <- c("Event","V1", "populationEffect")
colnames(summaryeconomicData) <- c("Event", "V1", "economicEffect")
summarypopulationData <- summarypopulationData[order(-summarypopulationData$populationEffect), ]
# Chunk 2
library(ggplot2)
###plot graph
ggplot(data=head(summarypopulationData,10), aes(x=Event, y=populationEffect)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme( axis.ticks.x=element_blank())+
coord_flip() +
ggtitle("Top 10 Events Affecting Human Population") +
ylab("Total (Fatalities + Injuries)") +
xlab("Event")
summaryeconomicData <- summaryeconomicData[order(-summaryeconomicData$economicEffect), ]
ggplot(data=head(summaryeconomicData,10), aes(x=Event, y=economicEffect)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme(axis.ticks.x=element_blank())+
coord_flip()+
ggtitle("Top 10 Events Affecting Economy") +
ylab("Total Cost($) (Property + Crop Damage)") +
xlab("Event")
.1+.09 - .15
p <- c(.1,.2,.3,.4)
x <- 2:5
round(pnorm(93,mean=100,sd=10)*100)
round(pnorm(95,mean=100,sd=10)*100)
round(qnorm(95,mean=100,sd=10)*100,3)
round(qnorm(95,mean=100,sd=10),3)
round(qnorm(95,mean=100,sd=10)
)
round(qnorm(.95,mean=100,sd=10),3)
pt(2.5, 15, lower.tail=FALSE)
choose(8,7)*0.5^8 + choose(8,8)*0.5^8
pbinom(6, size=8,prob=0.5, lower.tail=FALSE)
ppois(9,5,lower.tail = FALSE)
swirl
library swirl
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm.r(y ~ x)
lm.r=lm(y ~ x)
summary(lm.r)
coef(lm.r)
z <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(z)
mdata <- data("mtcars")
lm.c <- lm(mpg~weight)
lm.c <- lm(mdata$mpg~mdata$weight)
head(mdata)
mdata <- data(mtcars)
head(mdata)
data("mtcars")
lm.c <- lm(mdata$mpg~mdata$weight)
lm.c <- lm(mpg~weight)
data(mtcars)
lm.c <- lm(mpg~weight)
lm.c <- lm(mtcars$mpg~mtcars$weight)
View(mtcars)
lm.c <- lm(mtcars$mpg~mtcars$wt)
summary(lm.c)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm.x(x~y)
lm.x<- lm(x~y)
summary(lm.x)
lm.x<- lm(y~x)
summary(lm.x)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm.x<- lm(y~x)
summary(lm.x)
lm.x<- lm(x~y)
summary(lm.x)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
8.58-mean(x)
melted <- melt(summary_tgrowth, id.vars=c("supp", "dose"))
source('C:/RPrograms/StatInference/Q2.R')
library(ggplot2)
#load ToothGrowth data to a df
tgrowth <- ToothGrowth
g <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_point(aes(color=supp))
print(g)
gg <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_boxplot(aes(color=supp))
print(gg)
summary_tgrowth <- aggregate(tgrowth$len, by=list(tgrowth$supp,tgrowth$dose), FUN=mean, na.rm=TRUE, na.action=NULL)
melted <- melt(tgrowth, id.vars=c("supp", "dose"))
source('C:/RPrograms/StatInference/Q2.R')
library(ggplot2)
library(reshape2)
#load ToothGrowth data to a df
tgrowth <- ToothGrowth
g <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_point(aes(color=supp))
print(g)
gg <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_boxplot(aes(color=supp))
print(gg)
summary_tgrowth <- aggregate(tgrowth$len, by=list(tgrowth$supp,tgrowth$dose), FUN=mean, na.rm=TRUE, na.action=NULL)
melted <- melt(tgrowth, id.vars=c("supp", "dose"))
View(melted)
View(melted)
source('C:/RPrograms/StatInference/Q2.R')
library(ggplot2)
library(reshape2)
library(dplyr)
#load ToothGrowth data to a df
tgrowth <- ToothGrowth
g <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_point(aes(color=supp))
print(g)
gg <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_boxplot(aes(color=supp))
print(gg)
summary_tgrowth <- aggregate(tgrowth$len, by=list(tgrowth$supp,tgrowth$dose), FUN=mean, na.rm=TRUE, na.action=NULL)
melted <- melt(tgrowth, id.vars=c("supp", "dose"))
means <- ddply(melted, c("supp", "dose", "variable"), summarise,
mean=mean(value))
source('C:/RPrograms/StatInference/Q2.R')
library(ggplot2)
library(reshape2)
library(plyr)
#load ToothGrowth data to a df
tgrowth <- ToothGrowth
g <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_point(aes(color=supp))
print(g)
gg <- ggplot(aes(x=dose, y=len), data=tgrowth) +
geom_boxplot(aes(color=supp))
print(gg)
summary_tgrowth <- aggregate(tgrowth$len, by=list(tgrowth$supp,tgrowth$dose), FUN=mean, na.rm=TRUE, na.action=NULL)
melted <- melt(tgrowth, id.vars=c("supp", "dose"))
means <- ddply(melted, c("supp", "dose", "variable"), summarise,
mean=mean(value))
View(means)
source('C:/RPrograms/StatInference/Q2.R')
means.barplot <- qplot(x=group, y=mean, fill=variable,
data=means, geom="bar")
View(means)
source('C:/RPrograms/StatInference/Q2.R')
means.barplot <- qplot(x=supp, y=mean, fill=variable,
data=means, geom="bar")
means.barplot <- qplot(x=supp, y=mean, fill=variable, data=means, geom="bar")
means.barplot
means.barplot <- qplot(x=supp, y=mean, fill=variable, data=means, geom="bar", stat = y)
means.barplot
means.barplot <- qplot(x=supp, y=mean, fill=len, data=means, geom="bar", stat = y)
means.barplot
source('C:/RPrograms/StatInference/Q2.R')
source('C:/RPrograms/StatInference/Q1.R')
setwd("c:\\rprograms\\statinference")
#set parameters
n <- 1000
group <- 40
lambda <- 0.2
#calculate theoritcal values
theoreticalmean <- 1 / lambda
theoreticalsd <- 1 / lambda
# run the simulation
data  <- rexp(n * group, lambda)
matrixdata <- matrix(data, n, group)
matrixmean <- apply(matrixdata,1,mean)
#calculate summary stats and plot histogram
simmean <- mean(matrixmean)
simsd <- sd(matrixmean)
simvar <- var(matrixmean)
hist(matrixmean)
#compare to CLT
simse = simsd / sqrt(group)
#calculate confidence
low <- simmean - 1.96 * simse
high <- simmean + 1.96 * simse
